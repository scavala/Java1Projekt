/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hr.algebra;

import hr.algebra.dal.RepositoryFactory;
import hr.algebra.model.Genre;
import hr.algebra.model.Movie;
import hr.algebra.model.Person;
import hr.algebra.parsers.rss.MovieParser;
import hr.algebra.utils.FileUtils;
import hr.algebra.utils.MessageUtils;
import java.io.File;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import hr.algebra.dal.Repository;

/**
 *
 * @author zakesekresa
 */
public class UploadDeleteMoviesPanel extends javax.swing.JPanel {

    private DefaultListModel<Movie> moviesModel;

    private Repository movieRepository;
    private Repository personRepository;
    private Repository genreRepository;

    private MovieParser movieParser;

    /**
     * Creates new form UploadDeleteMoviesPanel
     */
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        lsMovies = new javax.swing.JList<>();
        btnDelete = new javax.swing.JButton();
        btnUpload = new javax.swing.JButton();
        lbStatus = new javax.swing.JLabel();

        jScrollPane1.setViewportView(lsMovies);

        btnDelete.setBackground(java.awt.Color.red);
        btnDelete.setText("Delete all");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnUpload.setText("Upload movies");
        btnUpload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUploadActionPerformed(evt);
            }
        });

        lbStatus.setForeground(java.awt.Color.red);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(182, 182, 182)
                        .addComponent(btnUpload, javax.swing.GroupLayout.PREFERRED_SIZE, 373, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(42, 42, 42)
                        .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 373, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(lbStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 416, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(222, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 761, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnUpload, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lbStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    public UploadDeleteMoviesPanel() {
        initComponents();
        init();
    }


    private void btnUploadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUploadActionPerformed
        handleGui(true);
        new Thread(() -> {
            try {
                movieParser.parse();
                loadModel();
            } catch (Exception ex) {
                Logger.getLogger(UploadDeleteMoviesPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }).start();
    }//GEN-LAST:event_btnUploadActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        try {
            movieRepository.deleteAll();
            personRepository.deleteAll();
            genreRepository.deleteAll();
            loadModel();
            FileUtils.deleteFilesInFolder(new File(MainForm.IMAGESFOLDERURL));
        } catch (Exception ex) {
            Logger.getLogger(UploadDeleteMoviesPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnDeleteActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnUpload;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbStatus;
    private javax.swing.JList<Movie> lsMovies;
    // End of variables declaration//GEN-END:variables

    private void init() {
        try {
            moviesModel = new DefaultListModel<>();
            initRepository();
            movieParser = new MovieParser(movieRepository, personRepository, genreRepository);
            loadModel();
        } catch (Exception ex) {
            MessageUtils.showErrorMessage("Error", "Unabel to load form");
            Logger.getLogger(UploadDeleteMoviesPanel.class.getName()).log(Level.SEVERE, null, ex);
            System.exit(-1);
        }

    }

    private void initRepository() throws Exception {
        movieRepository = RepositoryFactory.getRepository(Movie.class);
        personRepository = RepositoryFactory.getRepository(Person.class);
        genreRepository = RepositoryFactory.getRepository(Genre.class);
    }

    private void loadModel() {
        java.awt.EventQueue.invokeLater(() -> {
            try {
                moviesModel.clear();
                List<Movie> allMovies = movieRepository.selectAll();
                allMovies.forEach(moviesModel::addElement);
                lsMovies.setModel(moviesModel);
                handleGui(false);
            } catch (Exception ex) {
                Logger.getLogger(UploadDeleteMoviesPanel.class.getName()).log(Level.SEVERE, null, ex);

            }
        });
    }

    private void handleGui(boolean searching) {
        lbStatus.setText(searching ? "Please wait for the data to download..." : "");
        btnUpload.setEnabled(!searching);
        btnDelete.setEnabled(!searching);
    }

}
