/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hr.algebra;

import hr.algebra.dialog.AddPersonDialog;
import hr.algebra.dialog.AddGenreDialog;
import hr.algebra.dal.RepositoryFactory;
import hr.algebra.model.Movie;
import hr.algebra.model.MovieTableModel;
import hr.algebra.model.Person;
import hr.algebra.model.PersonTransferable;
import hr.algebra.model.Genre;
import hr.algebra.model.GenreTransferable;
import hr.algebra.utils.MessageUtils;
import java.awt.datatransfer.Transferable;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.DropMode;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JList;
import javax.swing.ListSelectionModel;
import javax.swing.SwingUtilities;
import javax.swing.TransferHandler;
import static javax.swing.TransferHandler.COPY;
import hr.algebra.dal.Repository;
import hr.algebra.model.GenreManagable;
import hr.algebra.model.PersonManagable;
import java.util.Optional;

/**
 *
 * @author zakesekresa
 */
public class EditMovieEntitiesPanel extends javax.swing.JPanel implements PersonManagable, GenreManagable {

    private Repository movieRepository;
    private Repository personRepository;
    private Repository genreRepository;

    private MovieTableModel tableModel;

    private DefaultListModel<Person> allPersonsModel = new DefaultListModel<>();
    private DefaultListModel<Genre> allZanrsModel = new DefaultListModel<>();
    private DefaultListModel<Genre> zanrsModel = new DefaultListModel<>();

    private DefaultListModel<Person> glumciModel = new DefaultListModel<>();
    private DefaultListModel<Person> redateljiModel = new DefaultListModel<>();

    private Optional<Movie> selectedMovie;

    /**
     * Creates new form EditMovieEntitiesPanel
     */
    public EditMovieEntitiesPanel() {
        initComponents();
        init();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tbMovies = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        lsActors = new javax.swing.JList<>();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        lsAllPersons = new javax.swing.JList<>();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        lsDirectors = new javax.swing.JList<>();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        lsGenres = new javax.swing.JList<>();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        lsAllGenres = new javax.swing.JList<>();
        btnAddGenre = new javax.swing.JButton();
        btnAddPerson = new javax.swing.JButton();
        btnEditPerson = new javax.swing.JButton();
        btnDeletePerson = new javax.swing.JButton();
        btnRemoveActor = new javax.swing.JButton();
        btnRemoveDirector = new javax.swing.JButton();
        btnEditGenre = new javax.swing.JButton();
        btnDeleteGenre = new javax.swing.JButton();
        btnRemoveGenre = new javax.swing.JButton();

        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        tbMovies.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tbMovies.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbMoviesMouseClicked(evt);
            }
        });
        tbMovies.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tbMoviesKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(tbMovies);

        jLabel1.setText("Actors");

        jScrollPane2.setViewportView(lsActors);

        jLabel2.setText("Persons");

        jScrollPane3.setViewportView(lsAllPersons);

        jLabel3.setText("Directors");

        jScrollPane4.setViewportView(lsDirectors);

        jLabel4.setText("Genre");

        jScrollPane5.setViewportView(lsGenres);

        jLabel5.setText("All genres");

        jScrollPane6.setViewportView(lsAllGenres);

        btnAddGenre.setText("Add genre");
        btnAddGenre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddGenreActionPerformed(evt);
            }
        });

        btnAddPerson.setText("Add person");
        btnAddPerson.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddPersonActionPerformed(evt);
            }
        });

        btnEditPerson.setText("Edit");
        btnEditPerson.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditPersonActionPerformed(evt);
            }
        });

        btnDeletePerson.setBackground(java.awt.Color.black);
        btnDeletePerson.setForeground(java.awt.Color.red);
        btnDeletePerson.setText("Delete");
        btnDeletePerson.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeletePersonActionPerformed(evt);
            }
        });

        btnRemoveActor.setText("Remove actor");
        btnRemoveActor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActorActionPerformed(evt);
            }
        });

        btnRemoveDirector.setText("Remove director");
        btnRemoveDirector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveDirectorActionPerformed(evt);
            }
        });

        btnEditGenre.setText("Edit");
        btnEditGenre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditGenreActionPerformed(evt);
            }
        });

        btnDeleteGenre.setBackground(java.awt.Color.black);
        btnDeleteGenre.setForeground(java.awt.Color.red);
        btnDeleteGenre.setText("Delete");
        btnDeleteGenre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteGenreActionPerformed(evt);
            }
        });

        btnRemoveGenre.setText("Remove genre");
        btnRemoveGenre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveGenreActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(25, 25, 25))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnRemoveActor, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(49, 49, 49)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnAddPerson, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnEditPerson, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnDeletePerson, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane3))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addComponent(btnRemoveDirector, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 40, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnRemoveGenre, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(42, 42, 42)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnEditGenre, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addComponent(btnDeleteGenre, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 277, Short.MAX_VALUE)
                        .addComponent(btnAddGenre, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(22, 22, 22))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(67, 67, 67)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnAddGenre, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnAddPerson, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnRemoveActor, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnRemoveDirector, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnEditPerson, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnDeletePerson, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnEditGenre, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnDeleteGenre, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnRemoveGenre, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 367, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void tbMoviesKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tbMoviesKeyReleased
        setSelectedMovie();
        fillVariableLists();
    }//GEN-LAST:event_tbMoviesKeyReleased


    private void tbMoviesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbMoviesMouseClicked
        setSelectedMovie();
        fillVariableLists();
    }//GEN-LAST:event_tbMoviesMouseClicked

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        selectedMovie = Optional.empty();
        try {
            tableModel.setMovies(movieRepository.selectAll());
            fillVariableLists();
            initLists();
            
        } catch (Exception ex) {
            Logger.getLogger(EditMovieEntitiesPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_formComponentShown

    private void btnAddPersonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddPersonActionPerformed
        JFrame mainFrame = (JFrame) SwingUtilities.windowForComponent(this);

        new AddPersonDialog(mainFrame, false, this).setVisible(true);
}//GEN-LAST:event_btnAddPersonActionPerformed

    private void btnEditPersonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditPersonActionPerformed
        JFrame mainFrame = (JFrame) SwingUtilities.windowForComponent(this);

        new AddPersonDialog(mainFrame, false, this, lsAllPersons.getSelectedValue()).setVisible(true);
    }//GEN-LAST:event_btnEditPersonActionPerformed

    private void btnDeletePersonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeletePersonActionPerformed
        try {
            personRepository.delete(lsAllPersons.getSelectedValue().getId());

            setSelectedMovie();
            fillVariableLists();
            loadAllPersonsModel();
        } catch (Exception ex) {
            Logger.getLogger(EditMovieEntitiesPanel.class.getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage("Error", "Unable to delete person");
        }

    }//GEN-LAST:event_btnDeletePersonActionPerformed

    private void btnRemoveActorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActorActionPerformed
        try {
            selectedMovie.get().getActors().removeIf(a -> a.getId() == lsActors.getSelectedValue().getId());
            movieRepository.update(selectedMovie.get().getId(), selectedMovie.get());

            setSelectedMovie();
            fillActorsList();
        } catch (Exception ex) {
            Logger.getLogger(EditMovieEntitiesPanel.class.getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage("Error", "Unable to remove actor");

        }
    }//GEN-LAST:event_btnRemoveActorActionPerformed

    private void btnRemoveDirectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveDirectorActionPerformed
        try {
            selectedMovie.get().getDirectors().removeIf(a -> a.getId() == lsDirectors.getSelectedValue().getId());
            movieRepository.update(selectedMovie.get().getId(), selectedMovie.get());

            fillDirectorsList();
        } catch (Exception ex) {
            Logger.getLogger(EditMovieEntitiesPanel.class.getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage("Error", "Unable to remove director");

        }
    }//GEN-LAST:event_btnRemoveDirectorActionPerformed

    private void btnEditGenreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditGenreActionPerformed
        JFrame mainFrame = (JFrame) SwingUtilities.windowForComponent(this);

        new AddGenreDialog(mainFrame, false, this, lsAllGenres.getSelectedValue()).setVisible(true);
    }//GEN-LAST:event_btnEditGenreActionPerformed

    private void btnDeleteGenreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteGenreActionPerformed
        try {
            genreRepository.delete(lsAllGenres.getSelectedValue().getId());
            setSelectedMovie();
            fillGenresList();
            loadAllGenresModel();
        } catch (Exception ex) {
            Logger.getLogger(EditMovieEntitiesPanel.class.getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage("Error", "Unable to delete genre");
        }
    }//GEN-LAST:event_btnDeleteGenreActionPerformed

    private void btnAddGenreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddGenreActionPerformed
        JFrame mainFrame = (JFrame) SwingUtilities.windowForComponent(this);

        new AddGenreDialog(mainFrame, false, this).setVisible(true);
    }//GEN-LAST:event_btnAddGenreActionPerformed

    private void btnRemoveGenreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveGenreActionPerformed
        try {
            selectedMovie.get().getGenres().removeIf(a -> a.getId() == lsGenres.getSelectedValue().getId());
            movieRepository.update(selectedMovie.get().getId(), selectedMovie.get());

            setSelectedMovie();
            fillGenresList();
        } catch (Exception ex) {
            Logger.getLogger(EditMovieEntitiesPanel.class.getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage("Error", "Unable to remove genre");
        }
    }//GEN-LAST:event_btnRemoveGenreActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddGenre;
    private javax.swing.JButton btnAddPerson;
    private javax.swing.JButton btnDeleteGenre;
    private javax.swing.JButton btnDeletePerson;
    private javax.swing.JButton btnEditGenre;
    private javax.swing.JButton btnEditPerson;
    private javax.swing.JButton btnRemoveActor;
    private javax.swing.JButton btnRemoveDirector;
    private javax.swing.JButton btnRemoveGenre;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JList<Person> lsActors;
    private javax.swing.JList<hr.algebra.model.Genre> lsAllGenres;
    private javax.swing.JList<Person> lsAllPersons;
    private javax.swing.JList<Person> lsDirectors;
    private javax.swing.JList<hr.algebra.model.Genre> lsGenres;
    private javax.swing.JTable tbMovies;
    // End of variables declaration//GEN-END:variables

    private void init() {

        try {
            initRepository();
            initDragNDrop();
            initTable();
            initLists();

        } catch (Exception ex) {
            Logger.getLogger(EditBaseMoviesPanel.class.getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage("Error", "Unable to load form");
            System.exit(-1);
        }
    }

    private void initRepository() throws Exception {
        movieRepository = RepositoryFactory.getRepository(Movie.class);
        personRepository = RepositoryFactory.getRepository(Person.class);
        genreRepository = RepositoryFactory.getRepository(Genre.class);
    }

    private void initTable() throws Exception {
        tbMovies.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        tbMovies.setAutoCreateRowSorter(true);
        tbMovies.setRowHeight(25);
        tableModel = new MovieTableModel(movieRepository.selectAll());
        tbMovies.setModel(tableModel);
    }

    private void setSelectedMovie() {
        try {
            int selectedRow = tbMovies.getSelectedRow();
            int rowIndex = tbMovies.convertRowIndexToModel(selectedRow);
            int selectedMovieId = (int) tableModel.getValueAt(rowIndex, 0);
            selectedMovie = movieRepository.select(selectedMovieId);
        } catch (Exception ex) {
            selectedMovie = Optional.empty();
        }
    }

    private void initLists() {

        try {
            loadAllPersonsModel();
            loadAllGenresModel();
        } catch (Exception ex) {
            Logger.getLogger(EditBaseMoviesPanel.class.getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage("Error", "Unable to load entities from database");
        }

    }

    private void loadAllPersonsModel() throws Exception {
        allPersonsModel.clear();
        ((List<Person>) personRepository.selectAll()).forEach(allPersonsModel::addElement);
        lsAllPersons.setModel(allPersonsModel);
    }

    private void loadAllGenresModel() throws Exception {
        allZanrsModel.clear();
        ((List<Genre>) genreRepository.selectAll()).forEach(allZanrsModel::addElement);
        lsAllGenres.setModel(allZanrsModel);
    }

    private void fillVariableLists() {
        try {
            fillActorsList();
            fillDirectorsList();
            fillGenresList();
        } catch (Exception ex) {
            Logger.getLogger(EditMovieEntitiesPanel.class.getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage("Error", "Unable to load entities from database");
        }
    }

    private void fillActorsList() throws Exception {
        glumciModel.clear();
        if (!selectedMovie.isPresent()) {
            return;
        }
        selectedMovie.get().getActors().forEach(glumciModel::addElement);
        lsActors.setModel(glumciModel);
    }

    private void fillDirectorsList() throws Exception {
        redateljiModel.clear();
        if (!selectedMovie.isPresent()) {
            return;
        }
        selectedMovie.get().getDirectors().forEach(redateljiModel::addElement);
        lsDirectors.setModel(redateljiModel);
    }

    private void fillGenresList() throws Exception {
        zanrsModel.clear();
        if (!selectedMovie.isPresent()) {
            return;
        }
        selectedMovie.get().getGenres().forEach(zanrsModel::addElement);
        lsGenres.setModel(zanrsModel);
    }

    private void initDragNDrop() throws NoSuchMethodException {
        lsAllPersons.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        lsAllPersons.setDragEnabled(true);
        lsAllPersons.setTransferHandler(new ExportTransferHandlerPerson());

        lsActors.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        lsActors.setDropMode(DropMode.ON);
        lsActors.setTransferHandler(new ImportTransferHandlerPerson(lsActors));

        lsDirectors.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        lsDirectors.setDropMode(DropMode.ON);
        lsDirectors.setTransferHandler(new ImportTransferHandlerPerson(lsDirectors));

        lsAllGenres.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        lsAllGenres.setDragEnabled(true);
        lsAllGenres.setTransferHandler(new ExportTransferHandlerZanr());

        lsGenres.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        lsGenres.setDropMode(DropMode.ON);
        lsGenres.setTransferHandler(new ImportTransferHandlerZanr());

    }

    @Override
    public boolean addPerson(Person person) {
        try {
            personRepository.create(person);
            loadAllPersonsModel();
            return true;
        } catch (Exception ex) {
            Logger.getLogger(EditMovieEntitiesPanel.class.getName()).log(Level.SEVERE, null, ex);
            return false;
        }
    }

    @Override
    public boolean updatePerson(Person person) {
        try {
            personRepository.update(person.getId(), person);
            setSelectedMovie();
            loadAllPersonsModel();
            fillActorsList();
            fillDirectorsList();
            return true;
        } catch (Exception ex) {
            Logger.getLogger(EditMovieEntitiesPanel.class.getName()).log(Level.SEVERE, null, ex);
            return false;
        }
    }

    @Override
    public boolean addGenre(Genre genre) {
        try {
            genreRepository.create(genre);
            loadAllGenresModel();
            return true;
        } catch (Exception ex) {
            Logger.getLogger(EditMovieEntitiesPanel.class.getName()).log(Level.SEVERE, null, ex);
            return false;
        }
    }

    @Override
    public boolean updateGenre(Genre genre) {
        try {
            genreRepository.update(genre.getId(), genre);
            setSelectedMovie();
            loadAllGenresModel();
            fillGenresList();
            return true;
        } catch (Exception ex) {
            Logger.getLogger(EditMovieEntitiesPanel.class.getName()).log(Level.SEVERE, null, ex);
            return false;
        }
    }

    private class ExportTransferHandlerPerson extends TransferHandler {

        @Override
        public int getSourceActions(JComponent c) {
            return COPY;
        }

        @Override
        public Transferable createTransferable(JComponent c) {
            return new PersonTransferable(lsAllPersons.getSelectedValue());
        }
    }

    private class ImportTransferHandlerPerson extends TransferHandler {

        private final JList<Person> destination;

        private ImportTransferHandlerPerson(JList<Person> destination) {
            this.destination = destination;
        }

        @Override
        public boolean canImport(TransferSupport support) {
            return support.isDataFlavorSupported(PersonTransferable.PERSON_FLAVOR);
        }

        @Override
        public boolean importData(TransferSupport support) {

            Transferable transferable = support.getTransferable();
            try {
                Person add = (Person) transferable.getTransferData(PersonTransferable.PERSON_FLAVOR);

                if (lsDirectors == destination) {

                    selectedMovie.get().getDirectors().add(add);

                } else if (lsActors == destination) {

                    selectedMovie.get().getActors().add(add);

                }
                movieRepository.update(selectedMovie.get().getId(), selectedMovie.get());

                setSelectedMovie();
                fillVariableLists();
                return true;

            } catch (Exception ex) {
                Logger.getLogger(EditMovieEntitiesPanel.class.getName()).log(Level.SEVERE, null, ex);
                MessageUtils.showErrorMessage("Error", "Cannot add to database");
            }
            return false;
        }
    }

    private class ExportTransferHandlerZanr extends TransferHandler {

        @Override
        public int getSourceActions(JComponent c) {
            return COPY;
        }

        @Override
        public Transferable createTransferable(JComponent c) {
            return new GenreTransferable(lsAllGenres.getSelectedValue());
        }
    }

    private class ImportTransferHandlerZanr extends TransferHandler {

        @Override
        public boolean canImport(TransferSupport support) {
            return support.isDataFlavorSupported(GenreTransferable.GENRE_FLAVOR);
        }

        @Override
        public boolean importData(TransferSupport support) {
            Transferable transferable = support.getTransferable();
            try {
                Genre add = (Genre) transferable.getTransferData(GenreTransferable.GENRE_FLAVOR);
                selectedMovie.get().getGenres().add(add);
                movieRepository.update(selectedMovie.get().getId(), selectedMovie.get());
                setSelectedMovie();
                fillVariableLists();
                return true;

            } catch (Exception ex) {
                Logger.getLogger(EditMovieEntitiesPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
            return false;
        }
    }

}
